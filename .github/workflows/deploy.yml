name: TaskHorse CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # ------------------------------
  # 1. Lint & Code Quality Checks
  # ------------------------------
  quality-tests:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    # PHP (Laravel) checks
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        
    - name: Install Composer Dependencies
      working-directory: ./api
      run: composer install --prefer-dist --no-progress
      
    - name: Run Laravel Pint (Linter)
      working-directory: ./api
      run: composer require laravel/pint --dev && vendor/bin/pint --test
      
    - name: Run PHPStan (Static Analysis)
      working-directory: ./api
      run: composer require --dev phpstan/phpstan && vendor/bin/phpstan analyse app/ routes/ tests/ --memory-limit=1G


    # Node (React) checks
    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: 20
    - name: Install Node Dependencies
      run: npm install --legacy-peer-deps --prefix frontend
    - name: Run ESLint
      run: npm run lint --prefix frontend
    - name: Run TypeScript Build Check
      run: npm run build --prefix frontend --dry-run


  # ------------------------------
  # 2. Deployment Job
  # ------------------------------
  deploy:
    needs: quality-tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # SSH Setup
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DO_SSH_KEY }}

      - name: Copy Files to Server
        run: |
          ssh -o StrictHostKeyChecking=no root@139.59.32.89 "
            set -e
            cd /var/www/taskhorse
            git fetch origin main
            git reset --hard origin/main
          "
      
      - name: Create .env file from Secrets
        run: |
          ssh -o StrictHostKeyChecking=no root@139.59.32.89 "
            set -e
            cd /var/www/taskhorse
            echo "VITE_API_URL=${{ secrets.VITE_API_URL }}" >> .env
            echo "VITE_CLERK_PUBLISHABLE_KEY=${{ secrets.VITE_CLERK_PUBLISHABLE_KEY }}" >> .env

            echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
            echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env
            echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
            echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
            echo "APP_KEY=${{ secrets.APP_KEY }}" >> .env
            echo "APP_URL=${{ secrets.APP_URL }}" >> .env
            
            echo "DB_CONNECTION=${{ secrets.DB_CONNECTION }}" >> .env
            echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
            echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
            echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env
            echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            
            echo "MAIL_MAILER=${{ secrets.MAIL_MAILER }}" >> .env
            echo "MAIL_HOST=${{ secrets.MAIL_HOST }}" >> .env
            echo "MAIL_PORT=${{ secrets.MAIL_PORT }}" >> .env
            echo "MAIL_ENCRYPTION=${{ secrets.MAIL_ENCRYPTION }}" >> .env
            echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> .env
            echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env
            echo "MAIL_FROM_ADDRESS=${{ secrets.MAIL_FROM_ADDRESS }}" >> .env
            echo "MAIL_FROM_NAME=${{ secrets.MAIL_FROM_NAME }}" >> .env
          
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
            echo "AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }}" >> .env
            echo "AWS_BUCKET=${{ secrets.AWS_BUCKET }}" >> .env
            echo "CLERK_PEM_PUBLIC_KEY_BASE64=${{ secrets.CLERK_PEM_PUBLIC_KEY_BASE64 }}" >> .env
            echo "CLERK_WEBHOOK_SIGNING_SECRET=${{ secrets.CLERK_WEBHOOK_SIGNING_SECRET }}" >> .env
            echo "CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}" >> .env
          "

      - name: Build and Start Docker Containers
        run: |
          ssh -o StrictHostKeyChecking=no root@139.59.32.89 "
            set -e
            cd /var/www/taskhorse
            docker compose down
            docker compose build --no-cache
            docker compose up -d
          "    

      # Laravel Config & Migration
      